.. _intro-install:

Quick install guide
===================

Before you can use Transifex, you'll need to get it installed. This guide 
will guide you to a simple, minimal installation that'll work while you 
walk through the introduction.

Installing Python
-----------------

Being a Python Web tool, Transifex requires Python. We recommend 
installing Python 2.5 or later.

Get Python at http://www.python.org. If you're running Linux or Mac OS X, 
you probably already have it installed.

You can verify that Python's installed by typing ``python`` from your 
shell; you should see something like::

    Python 2.5.1 (r251:54863, Jun 15 2008, 18:24:51)
    [GCC 4.3.0 20080428 (Red Hat 4.3.0-8)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>>


Installing the Version Control Systems - VCS
--------------------------------------------

To run Transifex you need some VCS. Depending of which ones you want 
to use, you will need to install some of the following packages:

* Bazaar (bzr)
* CVS (cvs)
* Git (git)
* Mercurial (hg)
* Subversion (svn)

On Fedora you can run the following command to install all those VCS::

    yum install cvs subversion pysvn mercurial git bzr bzrtools 


Installing Django
-----------------

Transifex is developed on top of a Python Web Framework called Django. We 
recommend installing Django 1.0. You can get more information about how
to install Django in your system from the official Django documentation.

Usually you can use the package your distribution provides you, or you can
even use `easy_install` to setup the package. On Fedora you can just run::

    yum install Django

.. _install-django-deps:


Installing Python dependencies
------------------------------

This is the generic method for creating a development enviroment for 
transifex. We strongly suggest running those commands inside a virtualenv 
enviroment instead of running them as root.::

    easy_install Markdown httplib2 polib
    easy_install Django python-openid django-authopenid django-pagination
    easy_install -f http://transifex.org/files/eggs/ contact_form tagging

For notifications (it's optional)::

    easy_install django-notification

A note on ``PythonPath``
~~~~~~~~~~~~~~~~~~~~~~~~

These applications can be installed anywhere on your system, as long as Python
can find them. Python uses the ``PythonPath`` environment variable for this.
The value you use for ``PythonPath`` should include the parent directories of
all the modules you are going to import in your application. It should also
include the parent directory of Transifex itself.
This is exactly the same situation as
setting the Python path for interactive usage. Whenever you try to import
something, Python will run through all the directories in ``sys.path`` in turn,
from first to last, and try to import from each directory until one succeeds.

An example might make this clearer. Suppose you have some applications under
``/usr/local/django-apps/`` (for example, ``/usr/local/django-apps/weblog/`` and
so forth), your settings file is at ``/var/www/mysite/settings.py`` and you have
specified DJANGO_SETTINGS_MODULE_ as in the above
example. In this case, you would need to write your ``PythonPath`` directive
as::

    PythonPath "['/usr/local/django-apps/', '/var/www'] + sys.path"

With this path, ``import weblog`` and ``import mysite.settings`` will both
work. If you had ``import blogroll`` in your code somewhere and ``blogroll``
lived under the ``weblog/`` directory, you would *also* need to add
``/usr/local/django-apps/weblog/`` to your ``PythonPath``. Remember: the
**parent directories** of anything you import directly must be on the Python
path.

.. _DJANGO_SETTINGS_MODULE: http://docs.djangoproject.com/en/dev/topics/settings/#django-settings-module


Installing Transifex
--------------------

After you have all dependencies and packages installed, the Transifex 
installation should be very simple. You only need to customize the 
``settings.py``, ``urls.py``, and then run::

    ./manage.py syncdb
    ./manage.py runserver 8088

.. warning::
 
    Make sure you have created in your system all the directories configured
    in your ``settings.py`` file, like the ``REPO_PATH``s for example.
    Without those paths created the checkout for these VCS will fail.

.. note::
 
    To enable Transifex's notifications you'll need to switch the relevant
    setting to True and enable the application in the ``INSTALLED_APPS`` list.

To enable debugging, run the server as follows::

    ./manage.py runserver --settings settings_debug

Initializing some data
~~~~~~~~~~~~~~~~~~~~~~

Transifex uses the fixtures feature of Django to load some initial datas
in the database.

.. note::
 
  Make sure you have executed the ``./manage.py syncdb``
  command before running the following commands.

The following command loads a bunch of sample data to play around with.

.. code-block:: bash

    ./manage.py loaddata transifex/fixtures/sample_data.json

Also, you can load a sample user 'guest' with password 'guest, with the
following command.

.. code-block:: bash

    ./manage.py loaddata transifex/fixtures/sample_users.json

Testing
-------

For testing the whole project you can run::

    ./manage.py test

For testing a specific application inside Transifex you can run::
 
    ./manage.py test projects
